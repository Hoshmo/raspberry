
var colors = require('colors');
var net = require('net');

var HOST = 'localhost';
var PORT = 5432;

/**
 noderob
 @method noderob
 @return {Object} noderob instance
 **/
exports.create = function (i_config) {
    return new noderob(i_config);
};

function noderob(i_config) {
    var self = this;
    self.m_debug = i_config.debug;
    self.m_serverConnect = i_config.serverConnect;
    this.init();
}

noderob.prototype = {
    constructor: noderob,

    init: function () {
        var self = this;
    },

    log: function (i_msg, i_level, i_color) {
        if (!i_color)
            i_color = 'yellow';
        var self = this;
        if (self.m_debug >= i_level) {
            console.log(i_msg[i_color])
        }
    },

    /**
     Connect to python socket server
     @method initSocket
     **/
    initSocket: function(){
        var self = this;
        if (self.m_serverConnect) {
            var socket = new net.Socket();
            socket.connect(PORT, HOST, function () {
                self.log('Robot client connected', 0);
            });

            // this event handler is called when data is received on the socket
            socket.on('data', function (data) {
                //log('DATA: ' + data);
            });

            // if the socket is closed, this handler will be called
            socket.on('close', function () {
                self.log('Connection closed', 0);
            });

            // catch cont-c
            //process.on('SIGINT', function(){
            //    socket.destroy();
            //    process.exit();
            //});

            return socket;
        }
    },

    /**
     Get percent
     @method perc
     @param {Number} perc
     @param {Number} amount
     @return {Number}
     **/
    perc: function(num, amount){
        return num * amount / 100;
    },

    /**
     Fix string / numeric to decimal
     @method fixDec
     @param {Number} val
     @return {Number}
     **/
    fixDec: function(val){
        return parseFloat(val).toFixed(2)
    },

    /**
     Handle error
     @method handleError
     @return {Boolean} Unique clientId.
     **/
    handleError: function (err) {
        console.log(err);
    }
};
